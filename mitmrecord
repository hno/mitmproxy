#!/usr/bin/env python

# Copyright (C) 2010  Henrik Nordstrom <henrik@henriknordstrom.net>
#
# Based on mitmproxy and mitmdump
# Copyright (C) 2010  Aldo Cortesi
# 
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

import sys, os.path
from libmproxy import proxy, controller, record, utils
from libmproxy import VERSION
from optparse import OptionParser, OptionGroup

if __name__ == '__main__':
    parser = OptionParser(
                usage = "%prog [options] output",
                version="%%prog %s"%VERSION,
            )

    parser.add_option(
        "--cert", action="store",
        type = "str", dest="cert", default="~/.mitmproxy/default.pem",
        help = "SSL certificate file."
    )

    parser.add_option(
        "-c", "--cacert", action="store",
        type = "str", dest="cacert", default="~/.mitmproxy/ca.pem",
        help = "SSL CA certificate file."
    )

    parser.add_option(
        "--certpath", action="store",
        type = "str", dest="certpath", default=None,
        help = "SSL certificate path."
    )

    parser.add_option(
        "--ciphers", action="store",
        type = "str", dest="ciphers", default=None,
        help = "SSL ciphers."
    )

    parser.add_option(
        "-p", "--port", action="store",
        type = "int", dest="port", default=8080,
        help = "Port."
    )

    parser.add_option(
        "-s", "--store", action="store",
        type = "str", dest="cache", default="cache/",
        help = "Session store location"
    )

    parser.add_option(
        "-C", "--cookies", action="append",
        type = "str", dest="cookies", default=[],
        help = "Persistent client cookies already set or generated in client"
    )

    parser.add_option("-q", "--quiet",
                      action="store_true", dest="quiet",
                      help="Quiet.")
    parser.add_option("-v", "--verbose",
                      action="count", dest="verbose", default=1,
                      help="Increase verbosity. Can be passed multiple times.")

    options, args = parser.parse_args()

    if options.quiet:
        options.verbose = 0

    if options.cert is not None:
        options.cert = os.path.expanduser(options.cert)
        if not os.path.exists(options.cert):
            print >> sys.stderr, "Creating bogus certificate at %s"%options.cert
            utils.make_bogus_cert(options.cert)
    if options.cacert is not None:
        options.cacert = os.path.expanduser(options.cacert)
        if not os.path.exists(options.cacert):
            print >> sys.stderr, "Creating bogus CA certificate at %s"%options.cacert
            utils.make_bogus_cert(options.cacert, newca=True, commonName="Dummy CA")
    if options.certpath is not None:
        options.certpath = os.path.expanduser(options.certpath)
    elif options.cacert is not None:
        options.certpath = os.path.dirname(options.cacert)
    if options.cache is not None:
        options.cache = os.path.expanduser(options.cache)

    proxy.config = proxy.Config(
        certfile = options.cert,
        certpath = options.certpath,
        cacert   = options.cacert,
        ciphers = options.ciphers
    )
    server = proxy.ProxyServer(options.port)
    utils.mkdir_p(options.cache)
    if os.path.exists(options.cache + "/index.txt"):
        print >> sys.stderr, "ERROR: data already recorded in %s"%options.cache
        sys.exit(1)
    m = record.RecordMaster(server, options)
    m.run()
